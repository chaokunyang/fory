// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.fory.benchmark.state.generated;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FBSBar extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FBSBar getRootAsFBSBar(ByteBuffer _bb) { return getRootAsFBSBar(_bb, new FBSBar()); }
  public static FBSBar getRootAsFBSBar(ByteBuffer _bb, FBSBar obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FBSBar __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSFoo f1() { return f1(new FBSFoo()); }
  public FBSFoo f1(FBSFoo obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String f2() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer f2AsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer f2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public FBSFoo f3(int j) { return f3(new FBSFoo(), j); }
  public FBSFoo f3(FBSFoo obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int f3Length() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public FBSFoo.Vector f3Vector() { return f3Vector(new FBSFoo.Vector()); }
  public FBSFoo.Vector f3Vector(FBSFoo.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int f4Key(int j) { int o = __offset(10); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int f4KeyLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public IntVector f4KeyVector() { return f4KeyVector(new IntVector()); }
  public IntVector f4KeyVector(IntVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer f4KeyAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer f4KeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  public FBSFoo f4Value(int j) { return f4Value(new FBSFoo(), j); }
  public FBSFoo f4Value(FBSFoo obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int f4ValueLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public FBSFoo.Vector f4ValueVector() { return f4ValueVector(new FBSFoo.Vector()); }
  public FBSFoo.Vector f4ValueVector(FBSFoo.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int f5() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long f6() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float f7() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public double f8() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public short f9(int j) { int o = __offset(22); return o != 0 ? bb.getShort(__vector(o) + j * 2) : 0; }
  public int f9Length() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public ShortVector f9Vector() { return f9Vector(new ShortVector()); }
  public ShortVector f9Vector(ShortVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer f9AsByteBuffer() { return __vector_as_bytebuffer(22, 2); }
  public ByteBuffer f9InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 2); }
  public long f10(int j) { int o = __offset(24); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int f10Length() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public LongVector f10Vector() { return f10Vector(new LongVector()); }
  public LongVector f10Vector(LongVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer f10AsByteBuffer() { return __vector_as_bytebuffer(24, 8); }
  public ByteBuffer f10InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 8); }

  public static int createFBSBar(FlatBufferBuilder builder,
      int f1Offset,
      int f2Offset,
      int f3Offset,
      int f4_keyOffset,
      int f4_valueOffset,
      int f5,
      long f6,
      float f7,
      double f8,
      int f9Offset,
      int f10Offset) {
    builder.startTable(11);
    FBSBar.addF8(builder, f8);
    FBSBar.addF6(builder, f6);
    FBSBar.addF10(builder, f10Offset);
    FBSBar.addF9(builder, f9Offset);
    FBSBar.addF7(builder, f7);
    FBSBar.addF5(builder, f5);
    FBSBar.addF4Value(builder, f4_valueOffset);
    FBSBar.addF4Key(builder, f4_keyOffset);
    FBSBar.addF3(builder, f3Offset);
    FBSBar.addF2(builder, f2Offset);
    FBSBar.addF1(builder, f1Offset);
    return FBSBar.endFBSBar(builder);
  }

  public static void startFBSBar(FlatBufferBuilder builder) { builder.startTable(11); }
  public static void addF1(FlatBufferBuilder builder, int f1Offset) { builder.addOffset(0, f1Offset, 0); }
  public static void addF2(FlatBufferBuilder builder, int f2Offset) { builder.addOffset(1, f2Offset, 0); }
  public static void addF3(FlatBufferBuilder builder, int f3Offset) { builder.addOffset(2, f3Offset, 0); }
  public static int createF3Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startF3Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addF4Key(FlatBufferBuilder builder, int f4KeyOffset) { builder.addOffset(3, f4KeyOffset, 0); }
  public static int createF4KeyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startF4KeyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addF4Value(FlatBufferBuilder builder, int f4ValueOffset) { builder.addOffset(4, f4ValueOffset, 0); }
  public static int createF4ValueVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startF4ValueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addF5(FlatBufferBuilder builder, int f5) { builder.addInt(5, f5, 0); }
  public static void addF6(FlatBufferBuilder builder, long f6) { builder.addLong(6, f6, 0L); }
  public static void addF7(FlatBufferBuilder builder, float f7) { builder.addFloat(7, f7, 0.0f); }
  public static void addF8(FlatBufferBuilder builder, double f8) { builder.addDouble(8, f8, 0.0); }
  public static void addF9(FlatBufferBuilder builder, int f9Offset) { builder.addOffset(9, f9Offset, 0); }
  public static int createF9Vector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startF9Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addF10(FlatBufferBuilder builder, int f10Offset) { builder.addOffset(10, f10Offset, 0); }
  public static int createF10Vector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startF10Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endFBSBar(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FBSBar get(int j) { return get(new FBSBar(), j); }
    public FBSBar get(FBSBar obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

