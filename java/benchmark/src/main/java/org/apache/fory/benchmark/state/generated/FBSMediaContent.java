// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.fory.benchmark.state.generated;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FBSMediaContent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FBSMediaContent getRootAsFBSMediaContent(ByteBuffer _bb) { return getRootAsFBSMediaContent(_bb, new FBSMediaContent()); }
  public static FBSMediaContent getRootAsFBSMediaContent(ByteBuffer _bb, FBSMediaContent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FBSMediaContent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBSMedia media() { return media(new FBSMedia()); }
  public FBSMedia media(FBSMedia obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public FBSImage images(int j) { return images(new FBSImage(), j); }
  public FBSImage images(FBSImage obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int imagesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public FBSImage.Vector imagesVector() { return imagesVector(new FBSImage.Vector()); }
  public FBSImage.Vector imagesVector(FBSImage.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFBSMediaContent(FlatBufferBuilder builder,
      int mediaOffset,
      int imagesOffset) {
    builder.startTable(2);
    FBSMediaContent.addImages(builder, imagesOffset);
    FBSMediaContent.addMedia(builder, mediaOffset);
    return FBSMediaContent.endFBSMediaContent(builder);
  }

  public static void startFBSMediaContent(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addMedia(FlatBufferBuilder builder, int mediaOffset) { builder.addOffset(0, mediaOffset, 0); }
  public static void addImages(FlatBufferBuilder builder, int imagesOffset) { builder.addOffset(1, imagesOffset, 0); }
  public static int createImagesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startImagesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFBSMediaContent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FBSMediaContent get(int j) { return get(new FBSMediaContent(), j); }
    public FBSMediaContent get(FBSMediaContent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

